#!/usr/bin/env bash

#
# Filename:       /etc/libvirt/hooks/ddcutil
# Description:    Automatically switch monitor inputs when starting/stopping a libvirt
#                 domain.
# URL(s):         https://github.com/PassthroughPOST/VFIO-Tools
# Author(s):      Sebastiaan <github.com/SharkWipf>
# Maintainer(s):  Alex Portell <codeberg.org/portellam> <github.com/portellam>
# Version:        1.0.0
#

#
# This hook allows automatically switch monitor inputs when starting/stopping a VM.
# This file depends on the Passthrough POST hook helper script found in this repo.
# Place this script in BOTH these directories (or symlink it):
#
# Set the files as executable through `chmod +x` and configure your inputs.
# You also need `ddcutil` and a ddcutil-compatible monitor.
#
# Make sure you specify the right settings for your setup below or it won't work.
#

#
# params
#
	STR_OPERATION="${2}"
	STR_SUBOPERATION="${3}"

  #
  # DESC: append output
  #
    STR_PREFIX_PROMPT="libvirt-qemu $( basename "${0}" )"
    STR_PREFIX_ERROR="${STR_PREFIX_PROMPT}An error occurred: "
    STR_PREFIX_FAIL="${STR_PREFIX_PROMPT}Failure: "
    STR_PREFIX_PASS="${STR_PREFIX_PROMPT}Success: "

	# The display shown in `ddcutil detect'.
    STR_DOMAIN_DISPLAY="0"

	# Video input values (without 0x, but with leading zeroes, if any.
  # See `ddcutil capabilities`.
    STR_DOMAIN_VIDEO_INPUT="12"
    STR_HOST_VIDEO_INPUT="0f"
    STR_VIDEO_INPUT=""

#
# logic
#
  #
  # DESC:   main execution
  # RETURN: If succesful, return 0.
  #         If not, return 1.
  #
    function main
    {
      local -r str_output="ddcutil"
      log_output "${str_output}"

      if ! get_video_input \
        || ! set_video_input; then
        log_fail "${str_output}"
        return 1
      fi

      log_pass "${str_output}"
      return 0
    }

  #
  # DESC: loggers
  #
    #
    # DESC:   Log the output as an error.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_error
      {
        echo -e "${STR_PREFIX_ERROR}${1}" >&2
        return 0
      }

    #
    # DESC:   Log the output as a fail.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_fail
      {
        echo -e "${STR_PREFIX_FAIL}${1}" >&2
        return 0
      }

    #
    # DESC:   Log the output as a fail.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_output
      {
        echo -e "${STR_PREFIX_PROMPT}${1}" >&1
        return 0
      }

    #
    # DESC:   Log the output as a pass.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_pass
      {
        echo -e "${STR_PREFIX_PASS}${1}" >&1
        return 0
      }

  #
  # DESC:   Get the video input.
  # RETURN: If video input is retrieved, return 0.
  #         If not, return 1.
  #
    function get_video_input
    {
      case "${STR_OPERATION}/${STR_SUBOPERATION}" in
        "started/begin" )
          STR_VIDEO_INPUT="${STR_DOMAIN_VIDEO_INPUT}"
          return 0 ;;

        "stopped/end" )
          STR_VIDEO_INPUT="${STR_HOST_VIDEO_INPUT}"
          return 0 ;;
      esac

      return 1
    }

  #
  # DESC:   Validate the video input has switched.
  # RETURN: If video input has switched, return 0.
  #         If not, return 1.
  #
    function has_switched_video_input
    {
      if [[ \
          "$( ddcutil -d "${STR_DOMAIN_DISPLAY}" getvcp 60 --terse \
            | awk '{print $4}' )" == "x${STR_VIDEO_INPUT}" \
        ]]; then
        log_output "Video input is already set."
      fi

      return 0
    }

  #
  # DESC:   Set the video input.
  # RETURN: If video input is set, return 0.
  #         If not, return 1.
  #
    function set_video_input
    {
      if has_switched_video_input; then
        return 0
      fi

      switch_video_input
      return 0
    }

  #
  # DESC:   Switch the video input.
  # RETURN: If video input is switched, return 0.
  #         If not, return 1.
  #
    function switch_video_input
    {
      if ! ddcutil -d "${STR_DOMAIN_DISPLAY}" setvcp 60 "0x${STR_VIDEO_INPUT}"; then
        log_error "Failed to switch video input."
        return 1
      fi

      log_output "Switched video input."
      return 0
    }

#
# main
#
	main