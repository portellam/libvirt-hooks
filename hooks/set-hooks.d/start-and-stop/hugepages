#!/usr/bin/env bash

#
# Filename:       /etc/libvirt/hooks/hugepages
# Description:    Reserve memory hugepages at start of Libvirt domain(s).
# URL(s):         https://github.com/PassthroughPOST/VFIO-Tools
# Author(s):      Sebastiaan <github.com/SharkWipf>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <remarks>
# This hook only needs to run on `prepare/begin`, not on stop.
#
# This hook will help free and compact memory to ease THP allocation.
# QEMU VMs will use THP (Transparent HugePages) by default if enough
# unfragmented memory can be found on startup. If your memory is very
# fragmented, this may cause a slow VM startup (like a slowly responding
# VM start button/command), and may cause QEMU to fall back to regular
# memory pages, slowing down VM performance.
# If you (suspect you) suffer from this, this hook will help ease THP
# allocation so you don't need to resort to misexplained placebo scripts.
# </remarks>


# <params>
  # <summary>
  # Color coding
  # Reference URL: 'https://www.shellhacks.com/bash-colors'
  # </summary>
    SET_COLOR_GREEN='\033[0;32m'
    SET_COLOR_RED='\033[0;31m'
    SET_COLOR_YELLOW='\033[0;33m'
    RESET_COLOR='\033[0m'

  # <summary>Append output</summary>
    PREFIX_PROMPT="libvirt-qemu $( basename "${0}" ): "
    PREFIX_ERROR="${PREFIX_PROMPT}${SET_COLOR_YELLOW}An error occurred:${RESET_COLOR} "
    PREFIX_FAIL="${PREFIX_PROMPT}${SET_COLOR_RED}Failure:${RESET_COLOR} "
    PREFIX_PASS="${PREFIX_PROMPT}${SET_COLOR_GREEN}Success:${RESET_COLOR} "
# </params>

# <functions>
  function main
  {
    local -r output="Hugepages"

    if ! write_host_memory_to_storage \
      || ! drop_filesystem_caches \
      || ! write_host_memory_to_storage \
      || ! defragment_host_memory; then
      print_fail_to_log "${output}"
      return 1
    fi

    print_pass_to_log "${output}"
  }

  # <summary>Loggers</summary>
    function print_error_to_log
    {
      echo -e "${PREFIX_ERROR}${1}" >&2
    }

    function print_fail_to_log
    {
      echo -e "${PREFIX_FAIL}${1}" >&2
    }

    function print_output_to_log
    {
      echo -e "${PREFIX_PROMPT}${1}" >&1
    }

    function print_pass_to_log
    {
      echo -e "${PREFIX_PASS}${1}" >&1
    }

  function write_host_memory_to_storage
  {
    if ! sync; then
      print_error_to_log "Failed to write Host memory to storage."
      return 1
    fi

    print_pass_to_log "Wrote Host memory to storage."
  }

  function drop_filesystem_caches
  {
    if ! echo 3 > /proc/sys/vm/drop_caches; then
      print_error_to_log "Failed to drop filesystem caches."
      return 1
    fi

    print_pass_to_log "Dropped filesystem caches."
  }

  function defragment_host_memory
  {
    if ! echo 1 > /proc/sys/vm/compact_memory; then
      print_error_to_log "Failed to defragment Host memory."
      return 1
    fi

    print_pass_to_log "Defragmented Host memory."
  }
# </functions>

# <code>
  main
# </code>