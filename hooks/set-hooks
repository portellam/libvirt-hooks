#!/usr/bin/env bash

#
# Filename:       /etc/libvirt/hooks/set-hooks
# Description:    Create symlinks of domain-specific hooks.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <remarks>
# Stateful hooks:
#   Execute hooks that change given different Libvirt domain state input (example: start or stop).
#   Place hooks in subdirectories found in '/etc/libvirt/hooks/set-hooks':
#     * start-only
#     * stop-only
#     * start-and-stop
# </remarks>

# <params>
  DOMAIN_NAME="${1}"

  # <summary>
  # Color coding
  # Reference URL: 'https://www.shellhacks.com/bash-colors'
  # </summary>
    SET_COLOR_GREEN='\033[0;32m'
    SET_COLOR_RED='\033[0;31m'
    SET_COLOR_YELLOW='\033[0;33m'
    RESET_COLOR='\033[0m'

  # <summary>Append output</summary>
    PREFIX_PROMPT="libvirt-qemu $( basename "${0}" ):"
    PREFIX_ERROR="${PREFIX_PROMPT}${SET_COLOR_YELLOW}An error occurred:${RESET_COLOR} "
    PREFIX_FAIL="${PREFIX_PROMPT}${SET_COLOR_RED}Failure:${RESET_COLOR} "
    PREFIX_PASS="${PREFIX_PROMPT}${SET_COLOR_GREEN}Success:${RESET_COLOR} "

  HOOKS_BASE_DIR="$( dirname $( realpath "${0}" ) )/"
  DOMAIN_NAME_BASE_DIR="${HOOKS_BASE_DIR}qemu.d/${DOMAIN_NAME}/"
  DOMAIN_NAME_START_DIR="${DOMAIN_NAME_BASE_DIR}started/begin/"
  DOMAIN_NAME_STOP_DIR="${DOMAIN_NAME_BASE_DIR}stopped/end/"

  STATEFUL_HOOKS_DIR="${0}.d/"
  STATEFUL_HOOKS_START_ONLY_DIR="${STATEFUL_HOOKS_DIR}start-only/"
  STATEFUL_HOOKS_STOP_ONLY_DIR="${STATEFUL_HOOKS_DIR}stop-only/"
  STATEFUL_HOOKS_BOTH_DIR="${STATEFUL_HOOKS_DIR}start-and-stop/"

  STATEFUL_HOOKS_START_LIST=( $( find -L "${STATEFUL_HOOKS_START_ONLY_DIR}" -maxdepth 1 -type f ) )
  STATEFUL_HOOKS_START_LIST+=( $( find -L "${STATEFUL_HOOKS_BOTH_DIR}" -maxdepth 1 -type f ) )

  STATEFUL_HOOKS_STOP_LIST=( $( find -L "${STATEFUL_HOOKS_STOP_ONLY_DIR}" -maxdepth 1 -type f ) )
  STATEFUL_HOOKS_STOP_LIST+=( $( find -L "${STATEFUL_HOOKS_BOTH_DIR}" -maxdepth 1 -type f ) )
# </params>

# <functions>
  function main
  {
    saveifs="${IFS}"
    IFS=$'\n'
    local -r output="Set hooks"
    print_output_to_log "${output}"

    if ! is_valid_domain \
      || ! get_paths_for_domain \
      || ! get_hooks; then
      print_fail_to_log "${output}"
      return 1
    fi

    setup_stateful_hooks
  }

  # <summary>Loggers</summary>
    function print_error_to_log
    {
      echo -e "${PREFIX_ERROR}${1}" >&2
    }

    function print_fail_to_log
    {
      echo -e "${PREFIX_FAIL}${1}" >&2
    }

    function print_output_to_log
    {
      echo -e "${PREFIX_PROMPT}${1}" >&1
    }

    function print_pass_to_log
    {
      echo -e "${PREFIX_PASS}${1}" >&1
    }


  # <summary>Getters</summary>
    function get_paths_for_domain
    {
      if ! create_directory "${DOMAIN_NAME_BASE_DIR}" \
        || ! create_directory "${DOMAIN_NAME_START_DIR}" \
        || ! create_directory "${DOMAIN_NAME_STOP_DIR}"; then
        print_error_to_log "Failed to create directories for Libvirt domain '${DOMAIN}'."
        return 1
      fi
    }

    function get_hooks
    {
      for hook_name in "${HOOKS_LIST[@]}"; do
        if [[ ! -e "${HOOK_BASE_DIR}${hook_name}" ]]; then
          print_error_to_log "Failed to find hook(s) for Libvirt domain '${DOMAIN}'."
          return 1
        fi
      done
    }

  # <summary>Validation</summary>
    function is_valid_domain
    {
      if [[ ! -z "${DOMAIN_NAME}" ]]; then
        print_error_to_log "Stateful hook requires a Libvirt domain '${DOMAIN}'."
        return 1
      fi
    }

  # <summary>Setters</summary>
    function set_start_hook_for_domain
    {
      if [[ -z "${1}" ]] \
        || [[ ! -e "${DOMAIN_NAME_START_DIR}${1}" ]]; then
        return 0
      fi

      if ! ln -s "${DOMAIN_NAME_START_DIR}${1}" "${HOOK_BASE_DIR}${1}" &> /dev/null; then
        print_error_to_log "Failed to set symlinks for start hook '${1}'."
        return 1
      fi

      if ! chmod +x "${DOMAIN_NAME_START_DIR}${1}" &> /dev/null; then
        print_error_to_log "Failed to set file permissions for start hook '${1}'."
        return 1
      fi
    }

    function set_stop_hook_for_domain
    {
      if [[ -z "${1}" ]] \
        || [[ ! -e "${DOMAIN_NAME_STOP_DIR}${1}" ]]; then
        return 0
      fi

      if ! ln -s "${DOMAIN_NAME_STOP_DIR}${1}" "${HOOK_BASE_DIR}${1}" &> /dev/null; then
        print_error_to_log "Failed to set symlinks for stop hook '${1}'."
        return 1
      fi

      if ! chmod +x "${DOMAIN_NAME_STOP_DIR}${1}" &> /dev/null; then
        print_error_to_log "Failed to set file permissions for stop hook '${1}'."
        return 1
      fi
    }

    function unset_hook_for_domain
    {
      if [[ -z "${1}" ]]; then
        return 0
      fi

      if [[ ! -e "${DOMAIN_NAME_START_DIR}${1}" ]] \
        && ! rm -rf "${DOMAIN_NAME_START_DIR}${1}" &> /dev/null; then
        print_error_to_log "Failed to unset symlinks for start hook '${1}'."
        return 1
      fi

      if [[ ! -z "${DOMAIN_NAME_STOP_DIR}${1}" ]] \
        && ! rm -rf "${DOMAIN_NAME_STOP_DIR}${1}" &> /dev/null; then
        print_error_to_log "Failed to unset symlinks for stop hook '${1}'."
        return 1
      fi
    }

  function create_directory
  {
    local -r dir="${1}"

    if [[ -d "${dir}" ]] \
      && ! mkdir --parents "${dir}" &> /dev/null; then
      print_error_to_log "Failed to create directory '${dir}'."
    fi
  }

  function setup_stateful_hooks
  {
    for hook in "${STATEFUL_HOOKS_START_LIST[@]}"; do
      set_start_hook_for_domain "${hook}" || unset_hook_for_domain "${hook}"
    done

    for hook in "${STATEFUL_HOOKS_STOP_LIST[@]}"; do
      set_stop_hook_for_domain "${hook}" || unset_hook_for_domain "${hook}"
    done
  }
# </functions>

# <code>
  main "$@"
# </code>