#!/usr/bin/env bash

#
# Filename:       /etc/libvirt/hooks/set-hooks
# Description:    Create symlinks of domain-specific hooks.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <remarks>
# Stateful hooks:
#   Execute hooks that change given different Libvirt domain state input (example: start or stop).
#   Place hooks in subdirectories found in '/etc/libvirt/hooks/set-hooks':
#     * start-only
#     * stop-only
#     * start-and-stop
# </remarks>

# <params>
  DOMAIN_NAME="${1}"
  # ARGUMENTS="$@"

  PREFIX_ERROR="An error occurred:"
  PREFIX_PROMPT="libvirt-qemu $( basename "${0}" ):"

  HOOKS_BASE_DIR="$( dirname $( realpath "${0}" ) )/"
  DOMAIN_NAME_BASE_DIR="${HOOKS_BASE_DIR}qemu.d/${DOMAIN_NAME}/"
  DOMAIN_NAME_START_DIR="${DOMAIN_NAME_BASE_DIR}started/begin/"
  DOMAIN_NAME_STOP_DIR="${DOMAIN_NAME_BASE_DIR}stopped/end/"

  STATEFUL_HOOKS_DIR="${0}.d/"
  STATEFUL_HOOKS_START_ONLY_DIR="${STATEFUL_HOOKS_DIR}start-only/"
  STATEFUL_HOOKS_STOP_ONLY_DIR="${STATEFUL_HOOKS_DIR}stop-only/"
  STATEFUL_HOOKS_BOTH_DIR="${STATEFUL_HOOKS_DIR}start-and-stop/"

  STATEFUL_HOOKS_START_LIST=( $( find -L "${STATEFUL_HOOKS_START_ONLY_DIR}" -maxdepth 1 -type f ) )
  STATEFUL_HOOKS_START_LIST+=( $( find -L "${STATEFUL_HOOKS_BOTH_DIR}" -maxdepth 1 -type f ) )

  STATEFUL_HOOKS_STOP_LIST=( $( find -L "${STATEFUL_HOOKS_STOP_ONLY_DIR}" -maxdepth 1 -type f ) )
  STATEFUL_HOOKS_STOP_LIST+=( $( find -L "${STATEFUL_HOOKS_BOTH_DIR}" -maxdepth 1 -type f ) )
# </params>

# <functions>
  function get_paths_for_domain
  {
    if ( [[ ! -d "${DOMAIN_NAME_BASE_DIR}" ]] && ! mkdir -p "${DOMAIN_NAME_BASE_DIR}" &> /dev/null ) \
      || ( [[ ! -d "${DOMAIN_NAME_START_DIR}" ]] && ! mkdir -p "${DOMAIN_NAME_START_DIR}" &> /dev/null ) \
      || ( [[ ! -d "${DOMAIN_NAME_STOP_DIR}" ]] && ! mkdir -p "${DOMAIN_NAME_STOP_DIR}" &> /dev/null ); then
      print_prompt_and_error_to_log "Failed to create directories for domain."
      return 1
    fi
  }

  function get_hooks
  {
    for hook_name in "${HOOKS_LIST[@]}"; do
      if [[ ! -e "${HOOK_BASE_DIR}${hook_name}" ]]; then
        print_prompt_and_error_to_log "Failed to find domain hook(s)."
        return 1
      fi
    done
  }

  function is_valid_domain
  {
    if [[ ! -z "${DOMAIN_NAME}" ]]; then
      return 1
    fi
  }

  function print_prompt
  {
    echo -e "${PREFIX_PROMPT} ${1}"
  }

  function print_prompt_to_log
  {
    print_prompt "${1}" >&2
  }

  function print_prompt_and_error_to_log
  {
    print_prompt_to_log "${PREFIX_ERROR} ${1}"
  }

  function set_start_hook_for_domain
  {
    if [[ -z "${1}" ]] \
      || [[ ! -e "${DOMAIN_NAME_START_DIR}${1}" ]]; then
      return 0
    fi

    if ! ln -s "${DOMAIN_NAME_START_DIR}${1}" "${HOOK_BASE_DIR}${1}" &> /dev/null; then
      print_prompt_and_error_to_log "Failed to set symlinks for start hook '${1}'."
      return 1
    fi

    if ! chmod +x "${DOMAIN_NAME_START_DIR}${1}" &> /dev/null; then
      print_prompt_and_error_to_log "Failed to set file permissions for start hook '${1}'."
      return 1
    fi
  }

  function set_stop_hook_for_domain
  {
    if [[ -z "${1}" ]] \
      || [[ ! -e "${DOMAIN_NAME_STOP_DIR}${1}" ]]; then
      return 0
    fi

    if ! ln -s "${DOMAIN_NAME_STOP_DIR}${1}" "${HOOK_BASE_DIR}${1}" &> /dev/null; then
      print_prompt_and_error_to_log "Failed to set symlinks for stop hook '${1}'."
      return 1
    fi

    if ! chmod +x "${DOMAIN_NAME_STOP_DIR}${1}" &> /dev/null; then
      print_prompt_and_error_to_log "Failed to set file permissions for stop hook '${1}'."
      return 1
    fi
  }

  function set_ifs_to_newline
  {
    IFS=$'\n'
  }

  function setup_stateful_hooks
  {
    for hook in "${STATEFUL_HOOKS_START_LIST[@]}"; do
      set_start_hook_for_domain "${hook}" || unset_hook_for_domain "${hook}"
    done

    for hook in "${STATEFUL_HOOKS_STOP_LIST[@]}"; do
      set_stop_hook_for_domain "${hook}" || unset_hook_for_domain "${hook}"
    done
  }

  function unset_hook_for_domain
  {
    if [[ -z "${1}" ]]; then
      return 0
    fi

    if [[ ! -e "${DOMAIN_NAME_START_DIR}${1}" ]] \
      && ! rm -rf "${DOMAIN_NAME_START_DIR}${1}" &> /dev/null; then
      print_prompt_and_error_to_log "Failed to unset symlinks for start hook '${1}'."
      return 1
    fi

    if [[ ! -z "${DOMAIN_NAME_STOP_DIR}${1}" ]] \
      && ! rm -rf "${DOMAIN_NAME_STOP_DIR}${1}" &> /dev/null; then
      print_prompt_and_error_to_log "Failed to unset symlinks for stop hook '${1}'."
      return 1
    fi
  }

  function unset_ifs
  {
    unset IFS
  }
# </functions>

# <code>
  if is_valid_domain \
    && get_paths_for_domain \
    && get_hooks; then
    setup_stateful_hooks
  fi
# </code>