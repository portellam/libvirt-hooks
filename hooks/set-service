#!/bin/false

#
# Filename:       /etc/libvirt/hooks/set-service
# Description:    Source file. Start or stop given systemd service.
# Author(s):      Alex Portell <codeberg.org/portellam> <github.com/portellam>
# Maintainer(s):  Alex Portell <codeberg.org/portellam> <github.com/portellam>
# Version:        1.0.0
#

#
# params
#
  #
  # DESC: append output
  #
    PREFIX_PROMPT="libvirt-qemu $( basename "${0}" )"
    PREFIX_ERROR="${PREFIX_PROMPT}An error occurred: "
    PREFIX_FAIL="${PREFIX_PROMPT}Failure: "
    PREFIX_PASS="${PREFIX_PROMPT}Success: "
    PREFIX_SKIP="${PREFIX_PROMPT}Skipped: "

#
# logic
#
  #
  # DESC:   This source file will not execute by itself.
  #         Define "source /etc/libvirt/hooks/set-service" with arguments.
  #         "source /etc/libvirt/hooks/set-service".
  # $1:     the name of the service as a string.
  # $@:     the arguments as a string.
  # RETURN: If execution is successful, return 0.
  #         If not, return 1.
  #
    function main
    {
      local -r service_name="${1}"
      local -r str_output="Set service"

      if ! is_service_name_valid "${service_name}"; then
        log_skip "${str_output}"
        return 0
      fi

      shift
      local -r operation="${2}"

      if ! is_argument_valid "${operation}"; then
        log_skip "${str_output}"
        return 1
      fi

      if ! set_operation "${service_name}" "${operation}"; then
        log_fail "${str_output}"
        return 1
      fi

      log_pass "${str_output}"
      return 0
    }

  #
  # DESC: loggers
  #
    #
    # DESC:   Log the output as an error.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_error
      {
        echo -e "${PREFIX_ERROR}${1}" >&2
        return 0
      }

    #
    # DESC:   Log the output as a fail.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_fail
      {
        echo -e "${PREFIX_FAIL}${1}" >&2
        return 0
      }

    #
    # DESC:   Log the output as a fail.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_output
      {
        echo -e "${PREFIX_PROMPT}${1}" >&1
        return 0
      }

    #
    # DESC:   Log the output as a pass.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_pass
      {
        echo -e "${PREFIX_PASS}${1}" >&1
        return 0
      }

    #
    # DESC:   Log the output as a skip.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_skip
      {
        echo -e "${PREFIX_SKIP}${1}" >&1
        return 0
      }

  #
  # DESC: service logic
  #
  #
    # DESC:   Disable the service.
    # $1:     the service name as a string.
    # RETURN: If service is disabled, return 0.
    #         If not, return 1.
    #
      function disable_service
      {
        local -r service="${1}"

        if ! systemctl disable "${service}" &> /dev/null; then
          log_error "Failed to disable '${service}' service."
          return 1
        fi

        log_output "Disabled '${service}' service."
        return 0
      }

    # DESC:   Enable the service.
    # $1:     the service name as a string.
    # RETURN: If service is enabled, return 0.
    #         If not, return 1.
    #
      function enable_service
      {
        local -r service="${1}"

        if ! systemctl enable "${service}" &> /dev/null; then
          log_error "Failed to enable '${service}' service."
          return 1
        fi

        log_output "Enabled '${service}' service."
        return 0
      }

    #
    # DESC:   Stop the service.
    # $1:     the service name as a string.
    # RETURN: If service is stopped, return 0.
    #         If not, return 1.
    #
      function start_service
      {
        local -r service="${1}"

        if ! systemctl start "${service}" &> /dev/null; then
          log_error "Failed to start '${service}' service."
          return 1
        fi

        log_output "Started '${service}' service."
        return 0
      }

    #
    # DESC:   Stop the service.
    # $1:     the service name as a string.
    # RETURN: If service is stopped, return 0.
    #         If not, return 1.
    #
      function stop_service
      {
        local -r service="${1}"

        if ! systemctl stop "${service}" &> /dev/null; then
          log_error "Failed to stop '${service}' service."
          return 1
        fi

        log_output "Stopped '${service}' service."
        return 0
      }

    #
    # DESC:   Set the operation of a service.
    # $1:     the service name as a string.
    # $2:     the operation argument as a string.
    # RETURN: If service's operation is set, or the operation status is not
    #         recognized, return 0.
    #         If service's operation is not set, return 1.
    #
      function set_operation
      {
        local -r service_name="${1}"
        local -r operation="${2}"

        case "${operation}" in
          "prepare")
            if ! enable_service "${service_name}" \
              || start_service "${service_name}"; then
              return 1
            fi
            ;;
          "release")

            if ! stop_service "${service_name}" \
              || disable_service "${service_name}"; then
              return 1
            fi
            ;;
        esac

        return 0
      }

    #
    # DESC:   Is the service name valid.
    # $1:     the service name as a string.
    # RETURN: If valid, return 0.
    #         If not valid, return 1.
    #
      function is_service_name_valid
      {
        local -r service_name="${1}"

        if [[ -z "${service_name}" ]]; then
          log_error "Service name is not valid."
          return 1
        fi

        return 0
      }

    #
    # DESC:   Is the operation argument valid.
    # $1:     the operation argument as a string.
    # RETURN: If valid, return 0.
    #         If not valid, return 1.
    #
      function is_argument_valid
      {
        local -r operation="${1}"

        if [[ -z "${operation}" ]]; then
          log_error "Operation argument is not valid."
          return 1
        fi

        return 0
      }