#!/bin/false

#
# Filename:       /etc/libvirt/hooks/set-service
# Description:    Source file. Start or stop given systemd service.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <params>
  PREFIX_ERROR="An error occurred:"
  PREFIX_PROMPT="libvirt-qemu $( basename "${0}" ):"
# </params>

# <functions>
  # <summary>
  # This source file will not execute by itself.
  # Define "source /etc/libvirt/hooks/set-service",
  #   follow with 'main "${my_array}"',
  #   where "${my_array}" contains:
  #     $1 == the name of the service (example: "libvirt-nosleep@DOMAIN_NAME")
  #     $2 == the path to the original service file (example: "/etc/systemd/system/libvirt-nosleep@.service")
  #     $@ == the remainder of arguments (note: pass "$@". The command 'shift' is used to decrement and parse input values.)
  # </summary>
  function main
  {
    local -r service_name="${1}"

    # if ! is_string "${service_name}"; then
      # print_error_to_log "Service name is not valid."
      # return 0
    # fi

    # local -r service_full_path="${2}"

    # if ! is_string "${service_full_path}" \
      # || ! is_path_valid "${service_full_path}"; then
      # print_error_to_log "Service path is not valid."
      # return 0
    # fi

    shift; shift
    local -r operation="${2}"

    # if ! is_string "${operation}"; then
      # print_error_to_log "Operation argument is not valid."
      # return 0
    # fi

    set_operation "${service_name}" "${operation}" || return 1
  }

  function is_path_valid
  {
    if [[ ! -e "${1}" ]]; then
      print_error_to_log "Path '${1}' is not valid."
    fi
  }

  function is_string
  {
    if [[ ! -z "${1}" ]]; then
      print_error_to_log "Empty string."
    fi
  }

  function print_prompt
  {
    echo -e "${PREFIX_PROMPT} ${1}"
  }

  function print_prompt_to_log
  {
    print_prompt "${1}" >&1
  }

  function print_error_to_log
  {
    print_prompt "${PREFIX_ERROR} ${1}" >&2
  }

  function set_operation
  {
    local -r service_name="${1}"
    local -r operation="${2}"

    case "${operation}" in
      "prepare")
        start_service "${service_name}" || return 1 ;;
      "release")
        stop_service "${service_name}" || return 1 ;;
    esac
  }

  function start_service
  {
    local -r service="${1}"

    if ! systemctl start "${service}" &> /dev/null; then
      print_error_to_log "Failed to start '${service}' service."
      return 1
    fi

    print_prompt "Started '${service}' service."
  }

  function stop_service
  {
    local -r service="${1}"

    if ! systemctl stop "${service}" &> /dev/null; then
      print_error_to_log "Failed to stop '${service}' service."
      return 1
    fi

    print_prompt "Stopped '${service}' service."
  }
# </functions>