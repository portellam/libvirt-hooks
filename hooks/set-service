#!/bin/false

#
# Filename:       /etc/libvirt/hooks/set-service
# Description:    Source file. Start or stop given systemd service.
# Author(s):      Alex Portell <github.com/portellam>
# Maintainer(s):  Alex Portell <github.com/portellam>
#

# <params>
  # <summary>
  # Color coding
  # Reference URL: 'https://www.shellhacks.com/bash-colors'
  # </summary>
    SET_COLOR_GREEN='\033[0;32m'
    SET_COLOR_RED='\033[0;31m'
    SET_COLOR_YELLOW='\033[0;33m'
    RESET_COLOR='\033[0m'

  # <summary>Append output</summary>
    PREFIX_PROMPT="libvirt-qemu $( basename "${0}" ): "
    PREFIX_ERROR="${PREFIX_PROMPT}${SET_COLOR_YELLOW}An error occurred:${RESET_COLOR} "
    PREFIX_FAIL="${PREFIX_PROMPT}${SET_COLOR_RED}Failure:${RESET_COLOR} "
    PREFIX_PASS="${PREFIX_PROMPT}${SET_COLOR_GREEN}Success:${RESET_COLOR} "
# </params>

# <functions>
  # <summary>
  # This source file will not execute by itself.
  # Define "source /etc/libvirt/hooks/set-service",
  #   follow with 'main "${my_array}"',
  #   where "${my_array}" contains:
  #     $1 == the name of the service (example: "libvirt-nosleep@DOMAIN_NAME")
  #     $@ == the remainder of arguments (note: pass "$@". The command 'shift' is used to decrement and parse input values.)
  # </summary>
  function main
  {
    local -r service_name="${1}"
    local -r output="Set service"

    if ! is_service_name_valid "${service_name}"; then
      print_fail_to_log "${output}"
      return 1
    fi

    shift
    local -r operation="${2}"

    if ! is_argument_valid "${operation}" \
      || ! set_operation "${service_name}" "${operation}"; then
      print_fail_to_log "${output}"
      return 1
    fi

    print_pass_to_log "${output}"
  }

  # <summary>Loggers</summary>
    function print_error_to_log
    {
      echo -e "${PREFIX_ERROR}${1}" >&2
    }

    function print_fail_to_log
    {
      echo -e "${PREFIX_FAIL}${1}" >&2
    }

    function print_output_to_log
    {
      echo -e "${PREFIX_PROMPT}${1}" >&1
    }

    function print_pass_to_log
    {
      echo -e "${PREFIX_PASS}${1}" >&1
    }


  # <summary>Service logic</summary>
    function disable_service
    {
      local -r service="${1}"

      if ! systemctl disable "${service}" &> /dev/null; then
        print_error_to_log "Failed to disable '${service}' service."
        return 1
      fi

      print_output_to_log "Disabled '${service}' service."
    }

    function enable_service
    {
      local -r service="${1}"

      if ! systemctl enable "${service}" &> /dev/null; then
        print_error_to_log "Failed to enable '${service}' service."
        return 1
      fi

      print_output_to_log "Enabled '${service}' service."
    }

    function start_service
    {
      local -r service="${1}"

      if ! systemctl start "${service}" &> /dev/null; then
        print_error_to_log "Failed to start '${service}' service."
        return 1
      fi

      print_output_to_log "Started '${service}' service."
    }

    function stop_service
    {
      local -r service="${1}"

      if ! systemctl stop "${service}" &> /dev/null; then
        print_error_to_log "Failed to stop '${service}' service."
        return 1
      fi

      print_output_to_log "Stopped '${service}' service."
    }

  function set_operation
  {
    local -r service_name="${1}"
    local -r operation="${2}"

    case "${operation}" in
      "prepare")
        enable_service "${service_name}" || return 1
        start_service "${service_name}" || return 1 ;;
      "release")
        stop_service "${service_name}" || return 1
        disable_service "${service_name}" || return 1 ;;
    esac
  }

  function is_service_name_valid
  {
    local -r service_name="${1}"

    if [[ -z "${service_name}" ]]; then
      print_error_to_log "Service name is not valid."
      return 1
    fi
  }

  function is_argument_valid
  {
    local -r operation="${1}"

    if [[ -z "${operation}" ]]; then
      print_error_to_log "Operation argument is not valid."
      return 1
    fi
  }
# </functions>