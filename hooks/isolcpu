#!/usr/bin/env bash

#
# Filename:       /etc/libvirt/hooks/isolcpu
# Description:    Reserve/release CPU threads at start of Libvirt domain(s).
# URL(s):         https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF#IO\_threads
# Author(s):      Alex Portell <codeberg.org/portellam> <github.com/portellam>
# Maintainer(s):  Alex Portell <codeberg.org/portellam> <github.com/portellam>
# Version:        1.0.0
#

#
# params
#
  STR_OPERATION="${2}"

  #
  # DESC: append output
  #
    STR_PREFIX_PROMPT="libvirt-qemu $( basename "${0}" )"
    STR_PREFIX_ERROR="${STR_PREFIX_PROMPT}An error occurred: "
    STR_PREFIX_FAIL="${STR_PREFIX_PROMPT}Failure: "
    STR_PREFIX_PASS="${STR_PREFIX_PROMPT}Success: "
    STR_PREFIX_SKIP="${STR_PREFIX_PROMPT}Skipped: "

  BOOL_USE_HEX_MASKS=true
  GUEST_THREADS_DELIM=""
  GUEST_THREADS_HEX=""
  HOST_THREADS_DELIM=""
  HOST_THREADS_HEX=""

#
# logic
#
  #
  # DESC: loggers
  #
    #
    # DESC:   Log the output as an error.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_error
      {
        echo -e "${STR_PREFIX_ERROR}${1}" >&2
        return 0
      }

    #
    # DESC:   Log the output as a fail.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_fail
      {
        echo -e "${STR_PREFIX_FAIL}${1}" >&2
        return 0
      }

    #
    # DESC:   Log the output as a fail.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_output
      {
        echo -e "${STR_PREFIX_PROMPT}${1}" >&1
        return 0
      }

    #
    # DESC:   Log the output as a pass.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_pass
      {
        echo -e "${STR_PREFIX_PASS}${1}" >&1
        return 0
      }

    #
    # DESC:   Log the output as a skip.
    # $1:     the output as a string.
    # RETURN: Always return 0.
    #
      function log_skip
      {
        echo -e "${STR_PREFIX_SKIP}${1}" >&1
        return 0
      }

  #
  # DESC:   Main execution.
  # $@:     the arguments as an array.
  # RETURN: If successful, return 0.
  #         If not, return 1.
  #
    function main
    {
      local -r str_output="Dynamic Isolcpu"

      log_output "${str_output}"

      if does_grub_have_isolcpu_setting; then
        log_skip "${str_output}"
        return 0
      fi

      local str_cpu_thread_set_hex_mask="${1}"
      local str_cpu_thread_set_delim="${2}"

      if ! get_cpu \
          "${str_cpu_thread_set_hex_mask}" \
          "${str_cpu_thread_set_delim}" \
        || ! release_or_reserve_cpu_threads \
          "${str_cpu_thread_set_hex_mask}" \
          "${str_cpu_thread_set_delim}"; then
        log_fail "${str_output}"
        return 1
      fi

      log_pass "${str_output}"
      return 0
    }

  #
  # DESC:   Does GRUB have 'isolcpu' setting.
  # RETURN: If true, return 0.
  #         If false, return 1.
  #
    function does_grub_have_isolcpu_setting
    {
      local -r str_grub_cmdline="$( \
        cat /etc/default/grub \
        | grep GRUB_CMDLINE_LINUX_DEFAULT \
        | cut --delimiter '"' --fields 2 \
       )"

      case "${str_grub_cmdline}" in
        *"isolcpus="*   | \
        *"nohz_full="*  | \
        *"rcu_nocbs="* )
          log_output "Static Isolcpu found in GRUB."
          return 0 ;;
      esac

      return 1
    }

#
# main
#
  main